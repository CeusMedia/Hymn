 _
| |_ _ _ _____ ___
|   | | |     |   |
|_|_|_  |_|_|_|_|_|
    |___|

hymn - Hydrogen Management

CLI Werkzeug f√ºr Anwendungen mit basierend auf dem Hydrogen Framework

Mehr: https://github.com/CeusMedia/Hymn
      https://github.com/CeusMedia/HydrogenFramework

Version: %version% (%language%)

Usage: hymn COMMAND [ARG]*

Keywords explained:
- Project   = Blueprint for an App installation configured by Hymn file
- App       = Set of installed modules, built or installed by project configuration
- Source    = Container of installable modules
- Module    = Collection of files and definitions to be installed into App

Commands:

A. Source Management
==============================================================================

For creating and extending an App's Hymn config file, you execute these commands:

A1. Project Creation and Source Management
------------------------------------------------------------------------------
- init                                        Create initial Hymn file for this project
- source-list                                 List library sources registered in Hymn file
- source-add                                  Add module source of modules to Hymn file
- source-remove KEY                           Remove module source from Hymn file
- source-enable [-dfqv] SOURCE                Enable source in Hymn file
- source-disable [-dfqv] SOURCE               Disable source in Hymn file

A2. Project Setup and Information
------------------------------------------------------------------------------
- config-get KEY                              Get setting from Hymn file
- config-set KEY [VALUE]                      Enter and save setting in Hymn file
- database-config                             Enter and save database connection details
- database-test                               Test database connection

A3. Project Module Management
------------------------------------------------------------------------------
- config-module-add                           Add a module to Hymn file
- config-module-remove                        Remove a module from Hymn file
- config-module-get MODULE.KEY                Get module setting from Hymn file
- config-module-set MODULE.KEY [VALUE]        Enter and save module setting in Hymn file

A4. Project Module Information
------------------------------------------------------------------------------
- module-info [-v] MODULE [SOURCE]            Show information about module (in library source)
- modules-available [SOURCE]                  List modules available (in library source)
- modules-installed [SOURCE]                  List modules installed within application (from library source)
- modules-required                            List modules required for application
- modules-search NAME [SOURCE]                List modules found by name part (within library source)
- modules-updatable                           List modules with available updates
- modules-unneeded                            List modules not needed by other modules

B. Application Management
==============================================================================

Having a valid Hymn config file, you execute these commands:

B1. App Base Configuration Management
------------------------------------------------------------------------------
- app-base-config-disable [-dqv] KEY          Disable an enabled setting in config.ini
- app-base-config-enable [-dqv] KEY           Enable a disabled setting in config.ini
- app-base-config-get KEY                     Read setting from config.ini
- app-base-config-set [-dqv] KEY VALUE        Save setting in config.ini

B2. App Instance & Module Management
------------------------------------------------------------------------------
- app-info [-v]                               Show app setup
- app-status [-v]                             Show status of app and its modules
- app-graph                                   Render module relations graph (see config/modules.graph.png)
- app-move [-dv] DESTINATION [URL]            Move app to another folder (and adjust app base URL)
- app-clear [-v] [CLEAR_TYPE+] [--age=MINS]   Clear cache, locks or logs

B3. App Module Management
------------------------------------------------------------------------------
- app-install [-dqv] [MODULE+]                Install specific available module(s) (or all)
- app-uninstall [-dfqv] [MODULE+]             Uninstall specific installed module(s) (or all)
- app-update [-dqv] [MODULE+]                 Updated specific installed modules(s) (or all)
- app-module-config-get MODULE.KEY            Get config value of installed module by config key
- app-module-config-set MODULE.KEY VALUE      Set config value of installed module by config key
- app-module-config-dump [--file=.hymn]       Export current module settings into Hymn file
- app-module-reconfigure [-dqv] MODULE        Configure installed module

B4. App Database Management
------------------------------------------------------------------------------
- database-clear [-dfqv]                      Drop database tables
- database-dump [PATH]                        Export database to SQL file
- database-load [PATH|FILE]                   Import (specific or latest) SQL file
- database-keep [KEEP_RULES]                  Remove database dumps not meeting the keep rules

Keep Rules:
--daily=[DAYS]             Number of daily dumps to keep
--monthly=[MONTHS]         Number of monthly dumps to keep
--yearly=[YEARS]           Number of yearly dumps to keep

B5. App Module Management: Stamps
------------------------------------------------------------------------------
- app-stamp-dump [SOURCE]                              Export current module settings into a stamp file
- app-stamp-diff [PATH|FILE] [TYPE] [SOURCE] [MODULE]  Show changes between installed modules and stamp
- app-stamp-load [PATH|FILE] [TYPE] [SOURCE] [MODULE]  Restore module settings of stamp (not implemented yet)
- app-stamp-prospect TYPE [SOURCE]                     Show changes when updating outdated modules
- app-stamp-info [PATH|FILE] [TYPE*] [SOURCE] [MODULE] Display details of stamp

Type:
  - * | all                All types or their changes
  - config                 Configuration or its changes, only
  - file | files           Files or their changes, only
  - relations              Relations, only
  - hooks                  Hooks, only
  - sql                    Database changes, only

Source:
  - * | all                all sources (default on empty)
  - SOURCE_ID              focus on specific source by its ID

Clear Types:
  - * | all                all types (default on empty)
  - cache                  clear caches
  - locks                  remove job locks
  - logs                   remove logs

C. Additional Functions
==============================================================================

C1. Self Management
------------------------------------------------------------------------------
- help                                        Show this help screen
- version                                     Show current hymn version
- self-update [-dv] [VERSION]                 Replace hymn binary by master or given version
- test-syntax [-rqv] [PATH]                   Test syntax of Hymn PHP classes

C2. Stamp Management
------------------------------------------------------------------------------
- stamp-diff [PATH|FILE] [TYPE] [SOURCE] [MODULE]  Show changes between available modules and stamp


Options:
------------------------------------------------------------------------------
-d | --dry                 Actions are simulated only
-f | --force               Continue actions on error or warnings
-q | --quiet               Avoid any output
-v | --verbose             Be verbose about taken steps
-r | --recursive           Perform file actions recursively (used by test-syntax only)
--file=[.hymn]             Alternative path of Hymn file
--prefix=[<%prefix%>]      Set database table prefix in dump
--db=[yes,no,only]         Switch to enable changes in database (default: yes)
